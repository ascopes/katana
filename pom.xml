<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.ascopes.katana</groupId>
  <artifactId>katana-parent</artifactId>
  <version>0.1.0-SNAPSHOT</version>

  <packaging>pom</packaging>

  <modules>
    <module>katana-compiler-testing</module>
  </modules>

  <properties>
    <!-- External dependencies -->
    <assertj.version>5.7</assertj.version>
    <fuzzywuzzy.version>1.3.3</fuzzywuzzy.version>
    <jimfs.version>1.2</jimfs.version>
    <junit.version>5.8.2</junit.version>
    <kotlin.version>1.6.10</kotlin.version>
    <mockk.version>1.12.2</mockk.version>
    <opentest4j.version>1.2.0</opentest4j.version>

    <!-- Standard Maven plugins -->
    <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
    <maven-surefire-plugin.version>3.0.0-M5</maven-surefire-plugin.version>

    <!-- Third-party plugins -->
    <build-helper-maven-plugin.version>3.3.0</build-helper-maven-plugin.version>
    <jacoco-maven-plugin.version>0.8.7</jacoco-maven-plugin.version>

    <!-- JDK/Kotlin versions -->
    <java-api-version>11</java-api-version>
    <kotlin-api-version>1.6</kotlin-api-version>

    <!-- Source directories -->
    <java-sources-dir>${project.basedir}/src/main/java</java-sources-dir>
    <kotlin-sources-dir>${project.basedir}/src/main/kotlin</kotlin-sources-dir>
    <java-tests-dir>${project.basedir}/src/test/java</java-tests-dir>
    <kotlin-tests-dir>${project.basedir}/src/test/kotlin</kotlin-tests-dir>

    <!-- Compiler flags -->
    <kotlin.compiler.apiVersion>${kotlin-api-version}</kotlin.compiler.apiVersion>
    <kotlin.compiler.incremental>false</kotlin.compiler.incremental>
    <kotlin.compiler.jvmTarget>${java-api-version}</kotlin.compiler.jvmTarget>
    <kotlin.compiler.languageVersion>${kotlin-api-version}</kotlin.compiler.languageVersion>

    <!--
      This argument is pulled in by Surefire, and JaCoCo will amend it to ensure the
      coverage agent is installed into the forked JVM running the tests. See
      https://www.eclemma.org/jacoco/trunk/doc/prepare-agent-mojo.html for info.

      We also disable code sharing to prevent some other warnings during test runs.
    -->
    <argLine>-Xshare:off</argLine>

    <!-- Project flags -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>com.google.jimfs</groupId>
        <artifactId>jimfs</artifactId>
        <version>${jimfs.version}</version>
      </dependency>

      <dependency>
        <groupId>io.mockk</groupId>
        <artifactId>mockk</artifactId>
        <version>${mockk.version}</version>
        <scope>test</scope>

        <exclusions>
          <exclusion>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-stdlib</artifactId>
          </exclusion>

          <exclusion>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-reflect</artifactId>
          </exclusion>
        </exclusions>
      </dependency>

      <dependency>
        <groupId>me.xdrop</groupId>
        <artifactId>fuzzywuzzy</artifactId>
        <version>${fuzzywuzzy.version}</version>
      </dependency>

      <dependency>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-bom</artifactId>
        <version>${kotlin.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>

      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>

      <dependency>
        <groupId>org.opentest4j</groupId>
        <artifactId>opentest4j</artifactId>
        <version>${opentest4j.version}</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>${build-helper-maven-plugin.version}</version>

          <executions>
            <execution>
              <!--
                This is needed in order for JaCoCo to detect and annotate
                Kotlin sources correctly in the coverage report. No idea
                why we even need to do this, since I would hope it would
                handle Kotlin properly by default given that it supports
                it.
              -->

              <id>add-kotlin-sources</id>
              <phase>generate-sources</phase>
              <goals>
                <goal>add-source</goal>
              </goals>
              <configuration>
                <sources>
                  <source>${kotlin-sources-dir}</source>
                </sources>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.jacoco</groupId>
          <artifactId>jacoco-maven-plugin</artifactId>
          <version>${jacoco-maven-plugin.version}</version>

          <executions>
            <execution>
              <id>prepare-jacoco-unittest-agent</id>
              <goals>
                <goal>prepare-agent</goal>
              </goals>
            </execution>
            <execution>
              <id>report-jacoco-unittest-coverage</id>
              <phase>test</phase>
              <goals>
                <goal>report</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.jetbrains.kotlin</groupId>
          <artifactId>kotlin-maven-plugin</artifactId>
          <version>${kotlin.version}</version>

          <configuration>
            <args>
              <!-- Enable strict mode for JSR-305 annotations -->
              <arg>-Xjsr305=strict</arg>
            </args>
          </configuration>

          <executions>
            <execution>
              <id>kotlin-compile</id>
              <goals>
                <goal>compile</goal>
              </goals>
              <configuration>
                <sourceDirs>
                  <sourceDir>${java-sources-dir}</sourceDir>
                  <sourceDir>${kotlin-sources-dir}</sourceDir>
                </sourceDirs>
              </configuration>
            </execution>
            <execution>
              <id>kotlin-test-compile</id>
              <goals>
                <goal>test-compile</goal>
              </goals>
              <configuration>
                <sourceDirs>
                  <sourceDir>${java-tests-dir}</sourceDir>
                  <sourceDir>${kotlin-tests-dir}</sourceDir>
                </sourceDirs>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>${maven-compiler-plugin.version}</version>
          <executions>
            <!--
              Replacing default-compile and default-testCompile so that we can handle joint Kotlin
              and Java sources together. Both the aforementioned targets get treated in a special
              way by Maven, which would cause us issues.
            -->
            <execution>
              <id>default-compile</id>
              <phase>none</phase>
            </execution>

            <execution>
              <id>default-testCompile</id>
              <phase>none</phase>
            </execution>

            <execution>
              <id>java-compile</id>
              <phase>compile</phase>
              <goals>
                <goal>compile</goal>
              </goals>
              <configuration>
                <source>${java-api-version}</source>
                <target>${java-api-version}</target>
              </configuration>
            </execution>

            <execution>
              <id>java-test-compile</id>
              <phase>test-compile</phase>
              <goals>
                <goal>testCompile</goal>
              </goals>
              <configuration>
                <testSource>${java-api-version}</testSource>
                <testTarget>${java-api-version}</testTarget>
              </configuration>
            </execution>
          </executions>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>${maven-surefire-plugin.version}</version>

          <configuration>
            <!-- Disable Java module management for tests, as it complicates things. -->
            <useModulePath>false</useModulePath>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>